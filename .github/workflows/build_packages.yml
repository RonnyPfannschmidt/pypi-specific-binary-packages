---
name: Build PyPI Specific Binary Packages

"on":
  push:
    branches:
      - main
      - master
  pull_request:
    types: ["opened", "synchronize", "reopened"]
  schedule:
    # Run weekly to catch new releases
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  build-packages:
    name: ${{ matrix.os }}-🐍-${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12", "3.13"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: ./scripts/install-dependencies.sh ${{ matrix.os }}

      - name: Install Python dependencies
        run: |
          pip install pip setuptools wheel build Cython -U

      - name: Build wheels
        run: ./scripts/build-wheels.sh

      - name: Archive wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-py-${{ matrix.python-version }}-${{ matrix.os }}
          path: wheels/

  combine-artifacts:
    name: Combine all wheel artifacts
    runs-on: ubuntu-latest
    needs: build-packages
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-wheels

      - name: Combine wheels
        run: |
          mkdir -p combined-wheels
          find all-wheels -name "*.whl" -exec cp {} combined-wheels/ \;
          echo "Combined wheels:"
          ls -la combined-wheels/

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels-combined
          path: combined-wheels/

      - name: Generate index page
        run: |
          mkdir -p site
          cd site
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>PyPI Specific Binary Packages</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  h1 { color: #333; }
                  .package-list { margin: 20px 0; }
                  .wheel-link { display: block; margin: 5px 0; }
              </style>
          </head>
          <body>
              <h1>PyPI Specific Binary Packages</h1>
              <p>Pre-built wheels for packages that can't be distributed
                 as manylinux wheels.</p>
              <div class="package-list">
                  <h2>Available Packages:</h2>
          EOF

          for wheel in ../combined-wheels/*.whl; do
              if [ -f "$wheel" ]; then
                  filename=$(basename "$wheel")
                  echo "        <a href=\"wheels/$filename\" \
                    class=\"wheel-link\">$filename</a>" >> index.html
              fi
          done

          cat >> index.html << 'EOF'
              </div>
              <p><em>Generated automatically by GitHub Actions</em></p>
          </body>
          </html>
          EOF

          # Copy wheels to site directory
          mkdir -p wheels
          cp ../combined-wheels/*.whl wheels/ 2>/dev/null || true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: combine-artifacts

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    name: Create Release with Artifacts
    runs-on: ubuntu-latest
    needs: deploy-pages
    if: >
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download combined artifacts
        uses: actions/download-artifact@v4
        with:
          name: all-wheels-combined
          path: release-wheels

      - name: Create release
        run: |
          # Generate release tag based on date
          RELEASE_TAG="release-$(date +'%Y%m%d-%H%M%S')"

          # Create release notes
          cat > release-notes.md << EOF
          # PyPI Specific Binary Packages Release

          This release contains pre-built wheels for packages that cannot
          be distributed as manylinux wheels:

          - **gssapi**: Generic Security Service Application Program Interface
          - **netifaces**: Portable network interface information
          - **python-qpid-proton**: Python bindings for Apache Qpid Proton

          ## Built for:
          - Python 3.12 and 3.13
          - Linux (ubuntu-latest)
          - macOS (macos-latest)

          ## Installation
          Download the appropriate wheel for your platform and Python version,
          then install with:
          \`\`\`
          pip install <wheel-file>
          \`\`\`

          Generated on: $(date)
          EOF

          # Create the release
          gh release create "$RELEASE_TAG" \
            --title "Binary Packages - $(date +'%Y-%m-%d %H:%M:%S')" \
            --notes-file release-notes.md \
            release-wheels/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
